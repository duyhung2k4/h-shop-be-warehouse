// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.1
// source: proto/rpc_file.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FileService_InsertFile_FullMethodName              = "/proto.FileService/InsertFile"
	FileService_DeleteFile_FullMethodName              = "/proto.FileService/DeleteFile"
	FileService_GetFileIdsWithProductId_FullMethodName = "/proto.FileService/GetFileIdsWithProductId"
)

// FileServiceClient is the client API for FileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileServiceClient interface {
	InsertFile(ctx context.Context, opts ...grpc.CallOption) (FileService_InsertFileClient, error)
	DeleteFile(ctx context.Context, in *DeleteFileReq, opts ...grpc.CallOption) (*DeleteFileRes, error)
	GetFileIdsWithProductId(ctx context.Context, in *GetFileIdsWithProductIdReq, opts ...grpc.CallOption) (*GetFileIdsWithProductIdRes, error)
}

type fileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileServiceClient(cc grpc.ClientConnInterface) FileServiceClient {
	return &fileServiceClient{cc}
}

func (c *fileServiceClient) InsertFile(ctx context.Context, opts ...grpc.CallOption) (FileService_InsertFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileService_ServiceDesc.Streams[0], FileService_InsertFile_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &fileServiceInsertFileClient{stream}
	return x, nil
}

type FileService_InsertFileClient interface {
	Send(*InsertFileReq) error
	CloseAndRecv() (*InsertFileRes, error)
	grpc.ClientStream
}

type fileServiceInsertFileClient struct {
	grpc.ClientStream
}

func (x *fileServiceInsertFileClient) Send(m *InsertFileReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileServiceInsertFileClient) CloseAndRecv() (*InsertFileRes, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(InsertFileRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileServiceClient) DeleteFile(ctx context.Context, in *DeleteFileReq, opts ...grpc.CallOption) (*DeleteFileRes, error) {
	out := new(DeleteFileRes)
	err := c.cc.Invoke(ctx, FileService_DeleteFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) GetFileIdsWithProductId(ctx context.Context, in *GetFileIdsWithProductIdReq, opts ...grpc.CallOption) (*GetFileIdsWithProductIdRes, error) {
	out := new(GetFileIdsWithProductIdRes)
	err := c.cc.Invoke(ctx, FileService_GetFileIdsWithProductId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileServiceServer is the server API for FileService service.
// All implementations must embed UnimplementedFileServiceServer
// for forward compatibility
type FileServiceServer interface {
	InsertFile(FileService_InsertFileServer) error
	DeleteFile(context.Context, *DeleteFileReq) (*DeleteFileRes, error)
	GetFileIdsWithProductId(context.Context, *GetFileIdsWithProductIdReq) (*GetFileIdsWithProductIdRes, error)
	mustEmbedUnimplementedFileServiceServer()
}

// UnimplementedFileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFileServiceServer struct {
}

func (UnimplementedFileServiceServer) InsertFile(FileService_InsertFileServer) error {
	return status.Errorf(codes.Unimplemented, "method InsertFile not implemented")
}
func (UnimplementedFileServiceServer) DeleteFile(context.Context, *DeleteFileReq) (*DeleteFileRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedFileServiceServer) GetFileIdsWithProductId(context.Context, *GetFileIdsWithProductIdReq) (*GetFileIdsWithProductIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileIdsWithProductId not implemented")
}
func (UnimplementedFileServiceServer) mustEmbedUnimplementedFileServiceServer() {}

// UnsafeFileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServiceServer will
// result in compilation errors.
type UnsafeFileServiceServer interface {
	mustEmbedUnimplementedFileServiceServer()
}

func RegisterFileServiceServer(s grpc.ServiceRegistrar, srv FileServiceServer) {
	s.RegisterService(&FileService_ServiceDesc, srv)
}

func _FileService_InsertFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileServiceServer).InsertFile(&fileServiceInsertFileServer{stream})
}

type FileService_InsertFileServer interface {
	SendAndClose(*InsertFileRes) error
	Recv() (*InsertFileReq, error)
	grpc.ServerStream
}

type fileServiceInsertFileServer struct {
	grpc.ServerStream
}

func (x *fileServiceInsertFileServer) SendAndClose(m *InsertFileRes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileServiceInsertFileServer) Recv() (*InsertFileReq, error) {
	m := new(InsertFileReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileService_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_DeleteFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).DeleteFile(ctx, req.(*DeleteFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_GetFileIdsWithProductId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileIdsWithProductIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).GetFileIdsWithProductId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_GetFileIdsWithProductId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).GetFileIdsWithProductId(ctx, req.(*GetFileIdsWithProductIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// FileService_ServiceDesc is the grpc.ServiceDesc for FileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.FileService",
	HandlerType: (*FileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteFile",
			Handler:    _FileService_DeleteFile_Handler,
		},
		{
			MethodName: "GetFileIdsWithProductId",
			Handler:    _FileService_GetFileIdsWithProductId_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "InsertFile",
			Handler:       _FileService_InsertFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/rpc_file.proto",
}
