// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.1
// source: proto/rpc_warehouse.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WarehouseService_Insert_FullMethodName    = "/proto.WarehouseService/Insert"
	WarehouseService_Update_FullMethodName    = "/proto.WarehouseService/Update"
	WarehouseService_UpCount_FullMethodName   = "/proto.WarehouseService/UpCount"
	WarehouseService_DownCount_FullMethodName = "/proto.WarehouseService/DownCount"
)

// WarehouseServiceClient is the client API for WarehouseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WarehouseServiceClient interface {
	Insert(ctx context.Context, in *InsertWarehouseReq, opts ...grpc.CallOption) (*InsertWarehouseRes, error)
	Update(ctx context.Context, in *UpdateWarehouseReq, opts ...grpc.CallOption) (*UpdateWarehouseRes, error)
	UpCount(ctx context.Context, in *UpCountWarehouseReq, opts ...grpc.CallOption) (*UpCountWarehouseRes, error)
	DownCount(ctx context.Context, in *DownCountWarehouseReq, opts ...grpc.CallOption) (*DownCountWarehouseRes, error)
}

type warehouseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWarehouseServiceClient(cc grpc.ClientConnInterface) WarehouseServiceClient {
	return &warehouseServiceClient{cc}
}

func (c *warehouseServiceClient) Insert(ctx context.Context, in *InsertWarehouseReq, opts ...grpc.CallOption) (*InsertWarehouseRes, error) {
	out := new(InsertWarehouseRes)
	err := c.cc.Invoke(ctx, WarehouseService_Insert_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseServiceClient) Update(ctx context.Context, in *UpdateWarehouseReq, opts ...grpc.CallOption) (*UpdateWarehouseRes, error) {
	out := new(UpdateWarehouseRes)
	err := c.cc.Invoke(ctx, WarehouseService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseServiceClient) UpCount(ctx context.Context, in *UpCountWarehouseReq, opts ...grpc.CallOption) (*UpCountWarehouseRes, error) {
	out := new(UpCountWarehouseRes)
	err := c.cc.Invoke(ctx, WarehouseService_UpCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseServiceClient) DownCount(ctx context.Context, in *DownCountWarehouseReq, opts ...grpc.CallOption) (*DownCountWarehouseRes, error) {
	out := new(DownCountWarehouseRes)
	err := c.cc.Invoke(ctx, WarehouseService_DownCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WarehouseServiceServer is the server API for WarehouseService service.
// All implementations must embed UnimplementedWarehouseServiceServer
// for forward compatibility
type WarehouseServiceServer interface {
	Insert(context.Context, *InsertWarehouseReq) (*InsertWarehouseRes, error)
	Update(context.Context, *UpdateWarehouseReq) (*UpdateWarehouseRes, error)
	UpCount(context.Context, *UpCountWarehouseReq) (*UpCountWarehouseRes, error)
	DownCount(context.Context, *DownCountWarehouseReq) (*DownCountWarehouseRes, error)
	mustEmbedUnimplementedWarehouseServiceServer()
}

// UnimplementedWarehouseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWarehouseServiceServer struct {
}

func (UnimplementedWarehouseServiceServer) Insert(context.Context, *InsertWarehouseReq) (*InsertWarehouseRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedWarehouseServiceServer) Update(context.Context, *UpdateWarehouseReq) (*UpdateWarehouseRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedWarehouseServiceServer) UpCount(context.Context, *UpCountWarehouseReq) (*UpCountWarehouseRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpCount not implemented")
}
func (UnimplementedWarehouseServiceServer) DownCount(context.Context, *DownCountWarehouseReq) (*DownCountWarehouseRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownCount not implemented")
}
func (UnimplementedWarehouseServiceServer) mustEmbedUnimplementedWarehouseServiceServer() {}

// UnsafeWarehouseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WarehouseServiceServer will
// result in compilation errors.
type UnsafeWarehouseServiceServer interface {
	mustEmbedUnimplementedWarehouseServiceServer()
}

func RegisterWarehouseServiceServer(s grpc.ServiceRegistrar, srv WarehouseServiceServer) {
	s.RegisterService(&WarehouseService_ServiceDesc, srv)
}

func _WarehouseService_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertWarehouseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServiceServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarehouseService_Insert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServiceServer).Insert(ctx, req.(*InsertWarehouseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarehouseService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWarehouseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarehouseService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServiceServer).Update(ctx, req.(*UpdateWarehouseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarehouseService_UpCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpCountWarehouseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServiceServer).UpCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarehouseService_UpCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServiceServer).UpCount(ctx, req.(*UpCountWarehouseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarehouseService_DownCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownCountWarehouseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServiceServer).DownCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarehouseService_DownCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServiceServer).DownCount(ctx, req.(*DownCountWarehouseReq))
	}
	return interceptor(ctx, in, info, handler)
}

// WarehouseService_ServiceDesc is the grpc.ServiceDesc for WarehouseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WarehouseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.WarehouseService",
	HandlerType: (*WarehouseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Insert",
			Handler:    _WarehouseService_Insert_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _WarehouseService_Update_Handler,
		},
		{
			MethodName: "UpCount",
			Handler:    _WarehouseService_UpCount_Handler,
		},
		{
			MethodName: "DownCount",
			Handler:    _WarehouseService_DownCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/rpc_warehouse.proto",
}

const (
	TypeWarehouseService_Insert_FullMethodName    = "/proto.TypeWarehouseService/Insert"
	TypeWarehouseService_Update_FullMethodName    = "/proto.TypeWarehouseService/Update"
	TypeWarehouseService_UpCount_FullMethodName   = "/proto.TypeWarehouseService/UpCount"
	TypeWarehouseService_DownCount_FullMethodName = "/proto.TypeWarehouseService/DownCount"
)

// TypeWarehouseServiceClient is the client API for TypeWarehouseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TypeWarehouseServiceClient interface {
	Insert(ctx context.Context, in *InsertTypeInWarehouseReq, opts ...grpc.CallOption) (*InsertTypeInWarehouseRes, error)
	Update(ctx context.Context, in *UpdateTypeInWarehouseReq, opts ...grpc.CallOption) (*UpdateTypeInWarehouseRes, error)
	UpCount(ctx context.Context, in *UpCountTypeInWarehouseReq, opts ...grpc.CallOption) (*UpCountTypeInWarehouseRes, error)
	DownCount(ctx context.Context, in *DownCountTypeInWarehouseReq, opts ...grpc.CallOption) (*DownCountTypeInWarehouseRes, error)
}

type typeWarehouseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTypeWarehouseServiceClient(cc grpc.ClientConnInterface) TypeWarehouseServiceClient {
	return &typeWarehouseServiceClient{cc}
}

func (c *typeWarehouseServiceClient) Insert(ctx context.Context, in *InsertTypeInWarehouseReq, opts ...grpc.CallOption) (*InsertTypeInWarehouseRes, error) {
	out := new(InsertTypeInWarehouseRes)
	err := c.cc.Invoke(ctx, TypeWarehouseService_Insert_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeWarehouseServiceClient) Update(ctx context.Context, in *UpdateTypeInWarehouseReq, opts ...grpc.CallOption) (*UpdateTypeInWarehouseRes, error) {
	out := new(UpdateTypeInWarehouseRes)
	err := c.cc.Invoke(ctx, TypeWarehouseService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeWarehouseServiceClient) UpCount(ctx context.Context, in *UpCountTypeInWarehouseReq, opts ...grpc.CallOption) (*UpCountTypeInWarehouseRes, error) {
	out := new(UpCountTypeInWarehouseRes)
	err := c.cc.Invoke(ctx, TypeWarehouseService_UpCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeWarehouseServiceClient) DownCount(ctx context.Context, in *DownCountTypeInWarehouseReq, opts ...grpc.CallOption) (*DownCountTypeInWarehouseRes, error) {
	out := new(DownCountTypeInWarehouseRes)
	err := c.cc.Invoke(ctx, TypeWarehouseService_DownCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TypeWarehouseServiceServer is the server API for TypeWarehouseService service.
// All implementations must embed UnimplementedTypeWarehouseServiceServer
// for forward compatibility
type TypeWarehouseServiceServer interface {
	Insert(context.Context, *InsertTypeInWarehouseReq) (*InsertTypeInWarehouseRes, error)
	Update(context.Context, *UpdateTypeInWarehouseReq) (*UpdateTypeInWarehouseRes, error)
	UpCount(context.Context, *UpCountTypeInWarehouseReq) (*UpCountTypeInWarehouseRes, error)
	DownCount(context.Context, *DownCountTypeInWarehouseReq) (*DownCountTypeInWarehouseRes, error)
	mustEmbedUnimplementedTypeWarehouseServiceServer()
}

// UnimplementedTypeWarehouseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTypeWarehouseServiceServer struct {
}

func (UnimplementedTypeWarehouseServiceServer) Insert(context.Context, *InsertTypeInWarehouseReq) (*InsertTypeInWarehouseRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedTypeWarehouseServiceServer) Update(context.Context, *UpdateTypeInWarehouseReq) (*UpdateTypeInWarehouseRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedTypeWarehouseServiceServer) UpCount(context.Context, *UpCountTypeInWarehouseReq) (*UpCountTypeInWarehouseRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpCount not implemented")
}
func (UnimplementedTypeWarehouseServiceServer) DownCount(context.Context, *DownCountTypeInWarehouseReq) (*DownCountTypeInWarehouseRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownCount not implemented")
}
func (UnimplementedTypeWarehouseServiceServer) mustEmbedUnimplementedTypeWarehouseServiceServer() {}

// UnsafeTypeWarehouseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TypeWarehouseServiceServer will
// result in compilation errors.
type UnsafeTypeWarehouseServiceServer interface {
	mustEmbedUnimplementedTypeWarehouseServiceServer()
}

func RegisterTypeWarehouseServiceServer(s grpc.ServiceRegistrar, srv TypeWarehouseServiceServer) {
	s.RegisterService(&TypeWarehouseService_ServiceDesc, srv)
}

func _TypeWarehouseService_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertTypeInWarehouseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypeWarehouseServiceServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TypeWarehouseService_Insert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypeWarehouseServiceServer).Insert(ctx, req.(*InsertTypeInWarehouseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypeWarehouseService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTypeInWarehouseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypeWarehouseServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TypeWarehouseService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypeWarehouseServiceServer).Update(ctx, req.(*UpdateTypeInWarehouseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypeWarehouseService_UpCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpCountTypeInWarehouseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypeWarehouseServiceServer).UpCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TypeWarehouseService_UpCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypeWarehouseServiceServer).UpCount(ctx, req.(*UpCountTypeInWarehouseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypeWarehouseService_DownCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownCountTypeInWarehouseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypeWarehouseServiceServer).DownCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TypeWarehouseService_DownCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypeWarehouseServiceServer).DownCount(ctx, req.(*DownCountTypeInWarehouseReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TypeWarehouseService_ServiceDesc is the grpc.ServiceDesc for TypeWarehouseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TypeWarehouseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TypeWarehouseService",
	HandlerType: (*TypeWarehouseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Insert",
			Handler:    _TypeWarehouseService_Insert_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _TypeWarehouseService_Update_Handler,
		},
		{
			MethodName: "UpCount",
			Handler:    _TypeWarehouseService_UpCount_Handler,
		},
		{
			MethodName: "DownCount",
			Handler:    _TypeWarehouseService_DownCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/rpc_warehouse.proto",
}
